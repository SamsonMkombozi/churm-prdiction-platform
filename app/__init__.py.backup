"""
Flask Application Factory - FIXED VERSION
app/__init__.py

Registers template filters to fix the 'number' filter error
"""
import os
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect

# Initialize extensions (but don't bind to app yet)
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
csrf = CSRFProtect()

def create_app(config_name=None):
    """Application factory pattern"""
    
    # Create Flask app
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # app/
    ROOT_DIR = os.path.abspath(os.path.join(BASE_DIR, '..'))  # project root

    app = Flask(
        __name__,
        template_folder=os.path.join(ROOT_DIR, 'templates'),
        static_folder=os.path.join(ROOT_DIR, 'static')
)
    # Load configuration
    if config_name is None:
        config_name = os.getenv('FLASK_ENV', 'development')
    
    from app.config.settings import get_config
    config_class = get_config(config_name)
    app.config.from_object(config_class)
    
    # Initialize extensions with app
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    # csrf.init_app(app)
    
    # Configure login manager
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Please log in to access this page.'
    login_manager.login_message_category = 'info'
    
    # ✅ FIXED: Register template filters BEFORE registering blueprints
    register_template_filters(app)
    
    # Register blueprints
    register_blueprints(app)
    
    # Register middleware
    register_middleware(app)
    
    # Register error handlers
    register_error_handlers(app)
    
    # User loader for Flask-Login
    from app.models.user import User
    
    @login_manager.user_loader
    def load_user(user_id):
        try:
            return User.query.get(int(user_id))
        except:
            return None
    
    # Setup logging
    if not app.debug:
        app.logger.setLevel(logging.INFO)
    
    app.logger.info(f'✅ Application started in {config_name} mode')
    
    return app


def register_blueprints(app):
    """Register all controller blueprints"""
    
    # Auth blueprint (always register)
    try:
        from app.controllers.auth_controller import auth_bp
        app.register_blueprint(auth_bp, url_prefix='/auth')
        app.logger.info("✅ Auth blueprint registered")
    except Exception as e:
        app.logger.error(f"❌ Failed to register auth blueprint: {e}")
    
    # Dashboard blueprint
    try:
        from app.controllers.dashboard_controller import dashboard_bp
        app.register_blueprint(dashboard_bp, url_prefix='/')
        app.logger.info("✅ Dashboard blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Dashboard blueprint not available: {e}")
    
    # Company blueprint
    try:
        from app.controllers.company_controller import company_bp
        app.register_blueprint(company_bp, url_prefix='/company')
        app.logger.info("✅ Company blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Company blueprint not available: {e}")
    
    # CRM blueprint
    try:
        from app.controllers.crm_controller import crm_bp
        app.register_blueprint(crm_bp, url_prefix='/crm')
        app.logger.info("✅ CRM blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ CRM blueprint not available: {e}")
    
    # Prediction blueprint
    try:
        from app.controllers.prediction_controller import prediction_bp
        app.register_blueprint(prediction_bp, url_prefix='/prediction')
        app.logger.info("✅ Prediction blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Prediction blueprint not available: {e}")


def register_middleware(app):
    """Register middleware"""
    try:
        from app.middleware.tenant_middleware import tenant_middleware
        app.before_request(tenant_middleware)
        app.logger.info("✅ Tenant middleware registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Tenant middleware not available: {e}")


def register_error_handlers(app):
    """Register error handlers"""
    
    @app.errorhandler(404)
    def not_found_error(error):
        from flask import render_template
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(403)
    def forbidden_error(error):
        from flask import render_template
        return render_template('errors/403.html'), 403
    
    @app.errorhandler(500)
    def internal_error(error):
        from flask import render_template
        db.session.rollback()
        return render_template('errors/500.html'), 500


def register_template_filters(app):
    """Register custom Jinja2 template filters"""
    
    # ✅ OPTION 1: Use the existing register_filters function
    try:
        from app.utils.template_filters import register_filters
        register_filters(app)
        app.logger.info("✅ Template filters registered from utils module")
    except Exception as e:
        app.logger.warning(f"⚠️ Could not import utils filters: {e}")
        
        # ✅ OPTION 2: Fallback - define filters inline
        @app.template_filter('number')
        def number_filter(value):
            """Format number with commas"""
            try:
                return "{:,}".format(int(value))
            except (ValueError, TypeError):
                return value
        
        @app.template_filter('datetime')
        def datetime_filter(value, format='%Y-%m-%d %H:%M:%S'):
            """Format datetime object"""
            if value is None:
                return ''
            if isinstance(value, str):
                return value
            try:
                return value.strftime(format)
            except (AttributeError, ValueError):
                return str(value)
        
        @app.template_filter('date')
        def date_filter(value, format='%Y-%m-%d'):
            """Format date object"""
            if value is None:
                return ''
            if isinstance(value, str):
                return value
            try:
                return value.strftime(format)
            except (AttributeError, ValueError):
                return str(value)
        
        @app.template_filter('currency')
        def currency_filter(value, symbol='$'):
            """Format as currency"""
            try:
                return f"{symbol}{float(value):,.2f}"
            except (ValueError, TypeError):
                return value
        
        @app.template_filter('percentage')
        def percentage_filter(value, decimals=1):
            """Format as percentage"""
            try:
                return f"{float(value):.{decimals}f}%"
            except (ValueError, TypeError):
                return value
        
        app.logger.info("✅ Fallback template filters registered")