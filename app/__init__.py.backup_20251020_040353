"""
Fixed Flask Application Factory - app/__init__.py
With proper authentication flow and churn prediction integration
"""
from flask import Flask, render_template, redirect, url_for, g
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, current_user
from flask_wtf.csrf import CSRFProtect
from redis import Redis
import logging
import os

# Initialize extensions
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
csrf = CSRFProtect()
redis_client = None

def create_app(config_name='default'):
    """Create Flask application factory"""
    app = Flask(__name__)
    
    # Load configuration
    from app.config.settings import get_config
    config = get_config(config_name)
    app.config.from_object(config)
    
    # Initialize extensions
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    csrf.init_app(app)
    
    # Configure login manager
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Please log in to access this page.'
    login_manager.login_message_category = 'info'
    
    # User loader for Flask-Login
    @login_manager.user_loader
    def load_user(user_id):
        from app.models.user import User
        return User.query.get(int(user_id))
    
    # Initialize Redis (optional)
    global redis_client
    try:
        if app.config.get('REDIS_URL'):
            redis_client = Redis.from_url(app.config['REDIS_URL'], decode_responses=True)
            redis_client.ping()
            app.logger.info('✅ Redis connected')
    except Exception as e:
        app.logger.warning(f'⚠️ Redis not available: {e}')
        redis_client = None
    
    # Register components
    register_blueprints(app)
    register_middleware(app)
    register_error_handlers(app)
    register_template_filters(app)
    
    # Root route - redirect to login or dashboard
    @app.route('/')
    def index():
        if current_user.is_authenticated:
            return redirect(url_for('dashboard.index'))
        return redirect(url_for('auth.login'))
    
    return app


def register_blueprints(app):
    """Register all blueprints with error handling"""
    
    # 1. Auth Controller (REQUIRED)
    try:
        from app.controllers.auth_controller import auth_bp
        app.register_blueprint(auth_bp, url_prefix='/auth')
        app.logger.info("✅ Auth blueprint registered")
    except Exception as e:
        app.logger.error(f"❌ Auth blueprint failed: {e}")
        raise  # Auth is required
    
    # 2. Dashboard Controller
    try:
        from app.controllers.dashboard_controller import dashboard_bp
        app.register_blueprint(dashboard_bp, url_prefix='/dashboard')
        app.logger.info("✅ Dashboard blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Dashboard blueprint not registered: {e}")
    
    # 3. Company Controller
    try:
        from app.controllers.company_controller import company_bp
        app.register_blueprint(company_bp, url_prefix='/company')
        app.logger.info("✅ Company blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Company blueprint not registered: {e}")
    
    # 4. CRM Controller
    try:
        from app.controllers.crm_controller import crm_bp
        app.register_blueprint(crm_bp, url_prefix='/crm')
        app.logger.info("✅ CRM blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ CRM blueprint not registered: {e}")
    
    # 5. Prediction Controller (IMPORTANT FOR CHURN)
    try:
        from app.controllers.prediction_controller import prediction_bp
        app.register_blueprint(prediction_bp, url_prefix='/prediction')
        app.logger.info("✅ Prediction blueprint registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Prediction blueprint not registered: {e}")


def register_middleware(app):
    """Register middleware"""
    
    # Tenant middleware for multi-company isolation
    try:
        from app.middleware.tenant_middleware import tenant_middleware
        app.before_request(tenant_middleware)
        app.logger.info("✅ Tenant middleware registered")
    except Exception as e:
        app.logger.warning(f"⚠️ Tenant middleware not registered: {e}")
    
    # Set current company in global context
    @app.before_request
    def load_company():
        if current_user.is_authenticated and current_user.company_id:
            from app.models.company import Company
            g.company = Company.query.get(current_user.company_id)
        else:
            g.company = None


def register_error_handlers(app):
    """Register error handlers"""
    
    @app.errorhandler(404)
    def not_found_error(error):
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(403)
    def forbidden_error(error):
        return render_template('errors/403.html'), 403
    
    @app.errorhandler(500)
    def internal_error(error):
        db.session.rollback()
        return render_template('errors/500.html'), 500


def register_template_filters(app):
    """Register custom Jinja2 filters"""
    
    @app.template_filter('number')
    def number_filter(value):
        try:
            return "{:,}".format(int(value))
        except (ValueError, TypeError):
            return value
    
    @app.template_filter('currency')
    def currency_filter(value, symbol='$'):
        try:
            return f"{symbol}{float(value):,.2f}"
        except (ValueError, TypeError):
            return value
    
    @app.template_filter('datetime')
    def datetime_filter(value, format='%Y-%m-%d %H:%M:%S'):
        if value is None:
            return ''
        if isinstance(value, str):
            return value
        try:
            return value.strftime(format)
        except (AttributeError, ValueError):
            return str(value)
    
    @app.template_filter('date')
    def date_filter(value, format='%Y-%m-%d'):
        if value is None:
            return ''
        if isinstance(value, str):
            return value
        try:
            return value.strftime(format)
        except (AttributeError, ValueError):
            return str(value)


# Global context processor
def inject_globals():
    return dict(
        company=getattr(g, 'company', None)
    )